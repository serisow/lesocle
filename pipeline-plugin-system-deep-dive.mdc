

---
description: 
globs: 
alwaysApply: false
---
# Pipeline Plugin System Deep Dive

## Plugin Architecture Overview
The Pipeline system relies heavily on Drupal's plugin system to provide extensibility and modularity. The system employs several plugin types working together to create a flexible orchestration framework.

## Core Plugin Types

### 1. StepTypePlugin System
Step Type plugins are the fundamental building blocks of pipeline execution flows.

#### Key Classes:
- **StepTypeInterface**: Defines the contract for all step type plugins
- **StepTypeBase**: Base implementation providing core functionality
- **ConfigurableStepTypeBase**: Extends with configuration form capabilities
- **StepTypeManager**: Plugin manager handling discovery and instantiation
- **StepTypePluginCollection**: Custom collection for ordered step management

#### Plugin Annotations:
```php
/**
 * @StepType(
 *   id = "llm_step",
 *   label = @Translation("LLM Step"),
 *   description = @Translation("Executes prompts against LLM services")
 * )
 */
```

#### Inheritance Model:
```
StepTypeInterface
    └── StepTypeBase
        ├── ConfigurableStepTypeBase
        │   ├── LLMStep
        │   └── ActionStep  
        └── AbstractLLMStepType (specialized base class)
            └── LLMStep

### 2. LLM Service Plugins
These plugins handle communication with different AI model providers.

#### Key Classes:
- **LLMServiceInterface**: Contract for all LLM service adapters
- **LLMServiceBase**: Common functionality for all LLM services
- **LLMServiceManager**: Plugin manager for LLM services

#### Implemented Services:
- OpenAIService
- AnthropicService
- GeminiService

#### Connection Flow:
1. LLMConfig entity provides credentials and settings
2. LLM Service plugin handles transport and protocol details
3. Model plugin specifies version and capability requirements

### 3. Action Service Plugins
Action plugins perform specific operations on data, including entity creation and external API calls.

#### Key Classes:
- **ActionServiceInterface**: Contract for action services
- **ActionServiceBase**: Common functionality for actions
- **ActionServiceManager**: Plugin manager for action services

#### Implementation Categories:
- **Content Creation**: Generate Drupal entities
- **Media Processing**: Handle images and videos
- **External Communication**: Social media integration, SMS, email
- **Data Enrichment**: Add metadata to content

### 4. Model Plugins
Represent specific AI model configurations across different providers.

#### Key Classes:
- **ModelInterface**: Contract for all model plugins
- **ModelBase**: Common functionality for models
- **ModelManager**: Plugin manager for model discovery

#### Model Properties:
- Provider compatibility
- Version requirements
- Capability flags (image generation, etc.)
- Token limits and context windows

## Plugin Interaction Flow

### Execution Sequence:
```
Pipeline Entity
    ├── StepTypePlugin (LLM Step)
    │     ├── LLMServicePlugin
    │     └── ModelPlugin
    ├── StepTypePlugin (Action Step)
    │     └── ActionServicePlugin
    └── StepTypePlugin (LLM Step)
          ├── LLMServicePlugin
          └── ModelPlugin
```

### Data Flow Between Plugins:
1. StepTypePlugin executes its core logic
2. Results stored in execution context
3. Next StepTypePlugin accesses previous results
4. ActionServicePlugins transform outputs into entities or actions
5. EntityCreationStrategies (from pipeline_integration) handle final entity creation

## Configuration and UI Integration

### Form Classes:
- **StepTypeFormBuilder**: Dynamically builds forms based on step type
- **ConfigurableStepTypeFormTrait**: Common form elements for step types
- **PipelineEditForm**: Manages the entire pipeline configuration UI

### AJAX Integration:
The system makes heavy use of AJAX for dynamic form handling:
- Dynamic step addition/removal
- Configuration form updates based on selected services
- Real-time validation of credentials and settings

### JavaScript Components:
- Drag-and-drop reordering of steps
- Dynamic form field handling
- Collapsible step display
- Real-time validation

## Extension Points

### New Step Types
To create a new step type:
1. Implement StepTypeInterface or extend StepTypeBase
2. Create appropriate annotation with ID and label
3. Implement configuration form if needed
4. Register any template requirements

### New Action Services
To create a new action service:
1. Implement ActionServiceInterface or extend ActionServiceBase
2. Create annotation with ID and label
3. Implement executeAction() method
4. Register in services.yml if dependencies needed

### New LLM Services
To create a new LLM service:
1. Implement LLMServiceInterface or extend LLMServiceBase
2. Create annotation with ID and label
3. Implement API communication methods
4. Add appropriate configuration form

### Entity Creation Strategies
Entity creation strategies are a special form of service tagged with 'entity_creation_strategy' that handle converting pipeline outputs to Drupal entities:
1. Implement EntityCreationStrategyInterface
2. Define supports() method to determine applicability
3. Register service with appropriate tag
4. Implement createEntity() method 