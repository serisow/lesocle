# Pipeline Integration Patterns

## Overview
The pipeline_integration module provides sophisticated mechanisms for connecting pipeline outputs with Drupal entities and external services. It implements several integration patterns that transform AI-generated content into structured Drupal entities and distribute this content across platforms.

## Entity Creation Framework

### EntityCreationStrategy Pattern
The core of the integration system is the EntityCreationStrategy pattern, which employs a strategy pattern to determine how pipeline outputs become Drupal entities.

#### Key Components:
- **EntityCreationStrategyInterface**: Contract for all entity creation strategies
- **EntityCreationStrategyBase**: Base implementation with common helper methods
- **EntityCreationStrategyManager**: Service manager that selects appropriate strategies
- **EntityCreationStrategyPass**: Compiler pass to collect tagged services

#### Registration Process:
Strategies are registered as services with a specific tag:
```yaml
services:
  pipeline_integration.entity_creation.article:
    class: Drupal\pipeline_integration\EntityCreation\Strategy\ArticleCreationStrategy
    arguments: ['@entity_type.manager', '@file_system']
    tags:
      - { name: 'entity_creation_strategy' }
```

#### Strategy Selection Logic:
- Each strategy implements a `supports()` method
- The manager tries each strategy in sequence
- First strategy to return true from `supports()` is used
- Fallback strategy catches unsupported content types

#### Content Processing Flow:
1. Pipeline execution completes with structured output
2. CreateEntityActionService receives the output
3. EntityCreationStrategyManager selects appropriate strategy
4. Strategy processes the content and creates Drupal entity
5. Entity references are returned to the pipeline context

## Media Processing Systems

### Image Processing
The module has sophisticated image handling capabilities:

- **Image Generation**: Works with AI image generation services
- **Image Downloading**: Processes and saves external images
- **Image Manipulation**: Adds text overlays, animations, effects
- **Media Entity Creation**: Creates appropriate media entities

### Video Generation
FFmpeg integration provides advanced video creation:

- **Slideshow Generation**: Creates videos from image sequences
- **Audio Integration**: Combines images with TTS audio
- **Text Overlays**: Adds dynamic text to videos
- **Animation Effects**: Ken Burns and other visual effects
- **Format Conversion**: Handles multiple video formats

### Implementation Components:
- **FFmpegService**: Core service for video manipulation
- **VideoFileManager**: Handles file operations and cleanup
- **ImageDownloadService**: Processes and downloads images
- **MediaEntityCreator**: Creates appropriate media entities

## External Service Integration

### Social Media Integration
The module provides action services for posting to social platforms:

#### Supported Platforms:
- **LinkedIn**: Share articles and images with LinkedIn API
- **Facebook**: Post to pages and groups
- **Twitter/X**: Post tweets and engage with content
- **Instagram**: Share images and videos (through Facebook API)

#### Authentication Patterns:
- OAuth token management for each platform
- Token refresh and expiration handling
- Rate limiting and request queuing
- Error recovery and retry logic

### Communication Services
Additional communication channels supported:

- **Email Services**: Send rich HTML emails with content
- **SMS Integration**: Send text messages via Twilio
- **Webhook Services**: Trigger external systems via webhooks
- **PDF Generation**: Create structured PDF documents

## Integration Flow Diagram




```
┌─────────────────────────────────────────────────┐
│                Pipeline Output                  │
└────────────────────────┬────────────────────────┘
                         │
                         ▼
┌─────────────────────────────────────────────────┐
│            CreateEntityActionService            │
└────────────────────────┬────────────────────────┘
                         │
                         ▼
┌─────────────────────────────────────────────────┐
│          EntityCreationStrategyManager          │
└────────────────────────┬────────────────────────┘
                         │
            ┌────────────┴────────────┐
            │                         │
            ▼                         ▼
┌─────────────────────┐     ┌──────────────────────┐
│ Article Strategy    │     │  Other Strategies    │
└─────────┬───────────┘     └──────────┬───────────┘
          │                            │
          ▼                            ▼
┌─────────────────────┐     ┌──────────────────────┐
│   Entity Creation   │     │   Entity Creation    │
└─────────┬───────────┘     └──────────┬───────────┘
          │                            │
          └────────────────────────────┘
                         │
                         ▼
┌─────────────────────────────────────────────────┐
│              Media Processing                   │
│  ┌───────────────┐  ┌───────────────────────┐  │
│  │ Image Media   │  │    Video Generation   │  │
│  └───────────────┘  └───────────────────────┘  │
└────────────────────────┬────────────────────────┘
                         │
                         ▼
┌─────────────────────────────────────────────────┐
│             External Distribution               │
│  ┌───────────────┐  ┌───────────────┐  ┌─────┐  │
│  │ Social Media  │  │ Email / SMS   │  │ PDF │  │
│  └───────────────┘  └───────────────┘  └─────┘  │
└─────────────────────────────────────────────────┘
```

## Field Mapping System
The entity creation strategies use a sophisticated field mapping system:

### Mapping Configuration:
- Configure source and target fields
- Support transformation functions
- Handle complex field types (entity references, etc.)
- Map between AI output structure and Drupal fields

### Default Field Maps:
- Title and body content
- Featured images and media
- Taxonomy terms and categories
- Meta tags and SEO information
- Author information

### Special Field Handling:
- **Taxonomy Auto-Creation**: Create terms if they don't exist
- **Image Field Processing**: Store images as file entities
- **Entity References**: Resolve references to other entities
- **Revision Information**: Manage revision logs and data

## Best Practices for Integration

### Entity Creation Strategies
When creating new entity creation strategies:
1. Extend EntityCreationStrategyBase for common functionality
2. Implement supports() with clear criteria
3. Use field mapping system for consistent field handling
4. Handle media entities appropriately
5. Set proper entity metadata (author, timestamps, etc.)

### External Service Integration
When adding new external service integrations:
1. Create dedicated ActionService plugin
2. Implement proper authentication handling
3. Use Drupal's state system for token storage
4. Implement proper error handling and retries
5. Follow rate limiting guidelines for the service

### Media Processing
When working with media processing:
1. Use MediaEntityCreator service for consistent entity creation
2. Handle temporary files properly with cleanup
3. Set appropriate media metadata
4. Follow Drupal's media library integration practices
5. Consider accessibility requirements 