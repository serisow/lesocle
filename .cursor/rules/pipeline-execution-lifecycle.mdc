---
description: 
globs: 
alwaysApply: false
---
# Pipeline Execution Lifecycle Deep Dive

## Execution Models
The Pipeline system supports two primary execution models:

### 1. Drupal-side Execution (Manual)
Triggered directly from the Drupal UI through the "Execute Now" button.
- Uses Drupal's Batch API for long-running operations
- Executes steps synchronously within Drupal
- Updates UI with real-time progress
- Creates PipelineRun entities directly

### 2. Go Service Execution (Scheduled/Automated)
Triggered by an external Go microservice for scheduled pipelines.
- Go service polls Drupal API endpoints for scheduled pipelines
- Executes the entire pipeline asynchronously
- Posts results back to Drupal when complete
- Supports higher throughput and reliability

## Execution Lifecycle Stages

### 1. Scheduling & Preparation
- Pipeline is configured with steps and scheduling options
- Schedule types: none, one-time, recurring
- Recurring options: hourly, daily, weekly, monthly
- Go service polls `/api/pipelines/scheduled` endpoint
- System determines which pipelines are due for execution

### 2. Initialization
- Pipeline execution context initialized
- Start time recorded
- Initial context data populated
- PipelineRun entity created (for Drupal-side execution) or prepared (for Go-service)
- Error capturing system initialized

### 3. Step Execution
For each step in weight order:
- Step plugin loaded and initialized
- Previous step results loaded into context
- Step-specific preparation (e.g., prompt template rendering)
- Core step logic executed (LLM call, action, etc.)
- Results captured and stored in context
- Errors captured and logged if they occur
- Execution metrics recorded (duration, token usage, etc.)

### 4. Result Processing
- Complete execution results assembled
- PipelineRun entity created or updated
- Media files processed and saved
- Entity creation strategies applied if needed
- Error logs finalized
- Execution metrics finalized

### 5. Completion & Feedback
- Execution status determined (completed/failed)
- Notification events triggered
- UI feedback provided
- Failure counter updated if needed
- Pipeline auto-disabled if failure threshold reached

## Error Handling

### PipelineErrorHandler Service
Sophisticated error handling system that:
- Captures PHP errors during execution
- Creates detailed log files
- Associates errors with specific steps
- Provides context for debugging
- Tracks error patterns

### Error Recovery Strategies
- Automatic retries for transient failures
- Graceful degradation for partial failures
- Detailed logging for diagnosis
- Execution failure thresholds to prevent repeated failures

## Detailed Flow Diagram

```
┌─────────────────┐     ┌─────────────────┐     ┌─────────────────┐
│ Admin Interface │     │ Drupal Cron     │     │  Go Service     │
└────────┬────────┘     └────────┬────────┘     └────────┬────────┘
         │                       │                       │
         ▼                       ▼                       ▼
┌────────────────────────────────────────────────────────────────┐
│                    Pipeline Selection                           │
└───────────────────────────────┬────────────────────────────────┘
                                │
                                ▼
┌────────────────────────────────────────────────────────────────┐
│                  Execution Initialization                       │
│                                                                │
│  ┌─────────────────┐    ┌─────────────────┐                    │
│  │ Context Created │    │ PipelineRun     │                    │
│  └─────────────────┘    │ Entity Created  │                    │
│                         └─────────────────┘                    │
└───────────────────────────────┬────────────────────────────────┘
                                │
                                ▼
┌────────────────────────────────────────────────────────────────┐
│                      Step Processing Loop                       │
│                                                                │
│  ┌─────────────────┐    ┌─────────────────┐    ┌──────────────┐│
│  │ Step Plugin     │───▶│ Step Execution  │───▶│ Result       ││
│  │ Initialization  │    │                 │    │ Processing   ││
│  └─────────────────┘    └─────────────────┘    └──────────────┘│
│          ▲                                             │       │
│          └─────────────────────────────────────────────┘       │
└───────────────────────────────┬────────────────────────────────┘
                                │
                                ▼
┌────────────────────────────────────────────────────────────────┐
│                    Execution Finalization                       │
│                                                                │
│  ┌─────────────────┐    ┌─────────────────┐    ┌──────────────┐│
│  │ Media           │    │ Entity          │    │ Metrics      ││
│  │ Processing      │    │ Creation        │    │ Calculation  ││
│  └─────────────────┘    └─────────────────┘    └──────────────┘│
└───────────────────────────────┬────────────────────────────────┘
                                │
                                ▼
┌────────────────────────────────────────────────────────────────┐
│                   Outcome Handling                              │
│                                                                │
│  ┌─────────────────┐    ┌─────────────────┐    ┌──────────────┐│
│  │ Success/Failure │    │ Notification    │    │ Pipeline     ││
│  │ Determination   │    │ Events          │    │ Status Update││
│  └─────────────────┘    └─────────────────┘    └──────────────┘│
└────────────────────────────────────────────────────────────────┘
```

## Code Implementation

### Drupal-side Execution (PipelineBatch)
The `PipelineBatch` class handles the Drupal-side execution:
- Implements the BatchInterface for Drupal's Batch API
- Processes each step and updates the UI
- Handles context sharing between steps
- Creates and updates PipelineRun entities

### Go Service Integration
The external Go service interacts with Drupal through API endpoints:
- `/api/pipelines/scheduled`: Lists pipelines ready for execution
- `/api/pipelines/{id}`: Gets full pipeline configuration
- `/pipeline/{id}/execution`: Receives execution results

### Execution Controller
The `PipelineExecutionController` handles receiving results:
- Processes step results from the Go service
- Creates PipelineRun entities
- Handles special output types (images, videos)
- Manages error states and logging
- Updates pipeline failure counts

## Performance Considerations

### Execution Metrics
The system tracks detailed performance metrics:
- Total execution time
- Per-step execution time
- Token usage for LLM calls
- Media processing time
- Entity creation time

### Optimization Strategies
- LLM service request parallelization (Go service)
- Connection pooling for external services
- Efficient context data handling
- Strategic error recovery to minimize retries 