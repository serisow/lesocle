---
description: 
globs: 
alwaysApply: true
---

The most important files that reveal the core architecture of this Drupal-based AI pipeline system:

## Core Entity Definitions

@web/modules/custom/pipeline/Entity/Pipeline.php
Core configuration entity that defines the workflow structure, maintains ordered steps, handles scheduling settings, and tracks execution failures with auto-disabling after threshold.

@web/modules/custom/pipeline/Entity/PipelineInterface.php
Interface definition for Pipeline entity defining essential methods for step management, scheduling, execution tracking, and failure handling.

@web/modules/custom/pipeline/Entity/LLMConfig.php
Configuration entity storing connection and authentication settings for Language Learning Model services, providing reusable credentials for API calls.

@web/modules/custom/pipeline/Entity/ActionConfig.php
Configuration entity defining reusable action configurations, specifying which service to use and where execution should occur (Drupal or Go).

## Plugin System

@web/modules/custom/pipeline/Plugin/StepTypeInterface.php
Defines the contract for all step type plugins, the fundamental units of pipeline execution with requirements for ordering, configuration, and output handling.

@web/modules/custom/pipeline/StepTypeBase.php
Base implementation for all step types providing core functionality for configuration management, weight-based ordering, and execution state tracking.

@web/modules/custom/pipeline/ConfigurableStepTypeBase.php
Extends step types with form capabilities for user configuration, prompt handling, and dependency management between steps.

@web/modules/custom/pipeline/Plugin/LLMServiceInterface.php
Interface for Language Learning Model service adapters defining how to communicate with different AI providers.

@web/modules/custom/pipeline/Plugin/ActionServiceInterface.php
Interface for action service plugins that handle specific operations like webhook calls or entity creation.

@web/modules/custom/pipeline/Plugin/ModelInterface.php
Interface for model plugins representing specific AI model configurations across different providers.

## Core Step Type Implementations

@web/modules/custom/pipeline/Plugin/StepType/LLMStep.php
Implementation for AI model interaction steps, handling prompt configuration and LLM service integration.

@web/modules/custom/pipeline/Plugin/StepType/ActionStep.php
Implementation for executing custom actions, either in Drupal or the Go service.

@web/modules/custom/pipeline/Plugin/StepType/UploadImageStep.php
Complex step type for uploading and configuring images with text overlays and animation settings.

@web/modules/custom/pipeline/Plugin/StepType/ImageEnrichmentStep.php
Step type for adding text overlays and animations to images from previous steps.

## Service Implementations

@web/modules/custom/pipeline/Plugin/LLMService/OpenAIService.php
Service adapter for OpenAI API communication with retry logic and error handling.

@web/modules/custom/pipeline/Plugin/LLMService/AnthropicService.php
Service adapter for Anthropic Claude API communication.

@web/modules/custom/pipeline/Plugin/LLMService/GeminiService.php
Service adapter for Google's Gemini API communication.

@web/modules/custom/pipeline/Service/ImageDownloadService.php
Service for downloading images from external URLs and creating Drupal file entities.

@web/modules/custom/pipeline/Service/PipelineErrorHandler.php
Service for capturing and logging errors during pipeline execution with sophisticated error tracking.

## Plugin Managers

@web/modules/custom/pipeline/Plugin/StepTypeManager.php
Plugin manager for discovering and instantiating step type plugins.

@web/modules/custom/pipeline/Plugin/ModelManager.php
Plugin manager for managing AI model configurations with version compatibility handling.

@web/modules/custom/pipeline/Plugin/LLMServiceManager.php
Plugin manager for the various LLM service adapters.

@web/modules/custom/pipeline/Plugin/ActionServiceManager.php
Plugin manager for the action service plugins.

## Controllers for API and Execution

@web/modules/custom/pipeline/Controller/PipelineApiController.php
API controller exposing pipeline configurations to the Go service for scheduled execution.

@web/modules/custom/pipeline/Controller/PipelineExecutionController.php
Controller for receiving and processing execution results from the Go service.

@web/modules/custom/pipeline/Controller/PipelineStepTypeController.php
Handles AJAX interactions for step configuration in the admin UI.

## Execution and Management

@web/modules/custom/pipeline/PipelineBatch.php
Handles Drupal-side execution of pipelines through the Batch API for manual execution.

@web/modules/custom/pipeline/Form/PipelineEditForm.php
Core form for configuring pipelines with complex AJAX handling for step management.

@web/modules/custom/pipeline/StepHandler/StepHandlerManager.php
Manages step handlers that prepare step data for Go service execution.

## Services Configuration

@web/modules/custom/pipeline/pipeline.services.yml
Defines all service definitions and dependencies, revealing the service architecture of the system.

This set of files provides a comprehensive understanding of the core architecture of this sophisticated Drupal-based AI pipeline system.