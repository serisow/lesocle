# Pipeline Run Module Deep Dive

## Overview
The pipeline_run module provides a comprehensive system for tracking, analyzing, and managing the execution history of pipelines. It implements a content entity for storing execution data, provides a sophisticated UI for visualizing results, and offers tools for debugging and performance analysis.

## PipelineRun Entity Architecture

### Core Entity Design
The PipelineRun entity (`PipelineRun.php`) is designed as a ContentEntity with several key features:

#### Entity Structure:
- **Pipeline Reference**: Links to the executed Pipeline config entity
- **Status Tracking**: Records execution state (pending, running, completed, failed)
- **Timing Data**: Stores start time, end time, and calculated duration
- **Step Results**: Detailed serialized data for each executed step
- **Error Handling**: Stores error messages and links to detailed log files
- **Context Data**: Preserves execution context for debugging
- **Metadata**: Records execution trigger type, user information, etc.

#### Field System:
```php
// Key fields from PipelineRun entity:
$fields['pipeline_id'] = BaseFieldDefinition::create('entity_reference')
  ->setLabel(t('Pipeline'))
  ->setSetting('target_type', 'pipeline');

$fields['status'] = BaseFieldDefinition::create('list_string')
  ->setLabel(t('Status'))
  ->setSetting('allowed_values', [
    'pending' => 'Pending',
    'running' => 'Running',
    'completed' => 'Completed',
    'failed' => 'Failed',
  ]);

$fields['step_results'] = BaseFieldDefinition::create('text_long')
  ->setLabel(t('Step Results'))
  ->setDescription(t('Serialized data of pipeline step results'));
  
$fields['log_file'] = BaseFieldDefinition::create('file')
  ->setLabel(t('Log File'))
  ->setDescription(t('Log file containing detailed execution logs.'));
```

### Data Storage Strategy
- Step results stored as serialized JSON for maximum flexibility
- Log files stored in private file system with controlled access
- Separates entity metadata from step-specific results
- Optimized for both small and large result sets

## User Interface Components

### PipelineRunListBuilder
The `PipelineRunListBuilder` class creates an administrative UI for viewing execution history:

#### Key Features:
- Sortable, filterable table of all pipeline executions
- Status indicators with color coding
- Duration formatting in human-readable form
- Quick links to detailed step results
- Deletion capabilities for old runs
- Batch operations for bulk management

### PipelineRunStepsController
The `PipelineRunStepsController` provides a detailed view of a single execution:

#### UI Elements:
- Step-by-step execution timeline
- Detailed step inputs and outputs
- Error messages and debugging information
- Performance metrics for each step
- Syntax highlighting for code and structured content
- Rendered preview of media outputs

### Custom Field Formatters
The module implements custom field formatters for specialized data types:

- **DurationFormatter**: Formats execution times into human-readable format
- **StepResultsFormatter**: Renders complex step results with proper formatting
- **LogFileFormatter**: Provides access to log files with security checks

## Template System
The module uses Twig templates to render execution data in a structured, accessible format:

### Template Files:
- **pipeline-run-steps.html.twig**: Renders step-by-step execution details
- **pipeline-run.html.twig**: Renders general execution metadata
- **pipeline-step-result.html.twig**: Renders individual step results

### Data Preprocessing:
The controllers implement preprocessing functions to:
- Format timestamps into readable dates
- Calculate execution durations
- Extract relevant data from serialized step results
- Format error messages for display
- Generate visualization data for metrics

## Integrations and Services

### PipelineRun Creation
PipelineRun entities are created through two primary flows:

#### Drupal-side Execution:
```php
// From the PipelineBatch class
$pipeline_run = $this->entityTypeManager->getStorage('pipeline_run')->create([
  'pipeline_id' => $pipeline->id(),
  'status' => 'running',
  'start_time' => \Drupal::time()->getCurrentTime(),
  'triggered_by' => 'manual',
]);
$pipeline_run->save();
```

#### Go Service Execution:
```php
// From the PipelineExecutionController
$pipeline_run = $this->entityTypeManager->getStorage('pipeline_run')->create([
  'pipeline_id' => $pipeline->id(),
  'status' => $data['success'] ? 'completed' : 'failed',
  'start_time' => $data['start_time'],
  'end_time' => $data['end_time'],
  'triggered_by' => 'api',
]);
$pipeline_run->save();
```

### Error Handling Integration
The module integrates with the PipelineErrorHandler service to:
- Capture PHP errors during execution
- Generate detailed log files
- Link log files to PipelineRun entities
- Provide debugging context for troubleshooting

## Analytics and Monitoring

### Execution Metrics
The module tracks detailed performance metrics:

#### Timing Metrics:
- Total execution time
- Per-step execution time
- Time spent in external services
- Processing time for media generation
- API response times

#### Resource Usage:
- Token usage for LLM calls
- Storage usage for media generation
- Network request counts
- External API call volume

### Analytical Views
The system provides several analytical perspectives:

- **Pipeline-centric**: View all executions of a specific pipeline
- **Time-based**: View executions across a time period
- **Status-based**: View failed or successful executions
- **Step-type**: Analyze performance of specific step types

## Implementation Patterns

### Entity Lifecycle Hooks
The module implements several entity lifecycle hooks:

- **preSave()**: Calculates duration, sets default values
- **postSave()**: Finalizes log file attachment
- **preDelete()**: Cleans up associated log files
- **loadByProperties()**: Custom loading by execution criteria

### Security Considerations
The module implements several security measures:

- **Permission-based access**: Controlled by role-based permissions
- **Private file handling**: Log files stored in private filesystem
- **Data sanitization**: Output is properly escaped for display
- **Execution isolation**: Results are isolated by pipeline and user

## Configuration and Setup

### Module Dependencies
```yaml
# From pipeline_run.info.yml
dependencies:
  - pipeline:pipeline
  - drupal:file
```

### Permission Structure
```yaml
# From pipeline_run.permissions.yml
administer pipeline run:
  title: 'Administer Pipeline Runs'
  description: 'Manage all pipeline execution records.'
  restrict access: TRUE

view pipeline run:
  title: 'View Pipeline Runs'
  description: 'View pipeline execution records.'
```

### Route Definition
```yaml
# Key routes from pipeline_run.routing.yml
pipeline_run.view_steps:
  path: '/pipeline_run/{pipeline_run}/steps'
  defaults:
    _controller: '\Drupal\pipeline_run\Controller\PipelineRunStepsController::viewSteps'
    _title: 'Pipeline Run Steps'
  requirements:
    _permission: 'view pipeline run'
```

## Best Practices

### Implementing Pipeline Run Monitoring
When implementing monitoring based on pipeline runs:
1. Use the entity query API to filter runs by criteria
2. Parse step results for specific output patterns
3. Consider creating Views integrations for custom reports
4. Implement hook_cron to clean up old pipeline runs

### Troubleshooting Failed Pipelines
Key steps for troubleshooting failures:
1. Check the PipelineRun status and error message
2. Review the attached log file for detailed errors
3. Examine the step_results field for step-specific failures
4. Verify the pipeline configuration hasn't changed
5. Check for external service availability issues 