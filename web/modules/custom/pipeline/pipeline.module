<?php

use Drupal\Core\Url;
use Drupal\Core\Render\Markup;
use Drupal\Core\StringTranslation\TranslatableMarkup;
/**
 * Implements hook_mail().
 */
function pipeline_mail($key, &$message, $params) {
  switch ($key) {
    case 'new_article_notification':
      $template = [
        '#theme' => 'pipeline_new_article_notification',
        '#title' => $params['title'],
        '#view_url' => $params['view_url'],
        '#edit_url' => $params['edit_url'],
      ];
      $html = \Drupal::service('renderer')->renderRoot($template);
      $message['subject'] = $params['subject'];
      $message['body'] = [Markup::create($html)];
      $message['headers']['Content-Type'] = 'text/html; charset=UTF-8';
      break;
  }
}

/**
 * Implements hook_theme().
 */
function pipeline_theme($existing, $type, $theme, $path) {
  return [
    'pipeline_new_article_notification' => [
      'variables' => [
        'title' => NULL,
        'view_url' => NULL,
        'edit_url' => NULL,
      ],
      'template' => 'pipeline-new-article-notification',
    ],
    'pipeline_dashboard' => [
      'variables' => [
        'stats' => [],
        'recent_pipelines' => [],
        'quick_actions' => [],
        'system_status' => [],
      ],
      // This tells Drupal to look in themes for overrides
      'path' => $path . '/templates',  // Specify the path
      'template' => 'pipeline-dashboard',
    ],
  ];
}


/**
 * Implements hook_toolbar().
 */
function pipeline_toolbar() {
  $items['shortcuts'] = [
    '#cache' => [
      'contexts' => [
        'user.permissions',
      ],
    ],
  ];

  $items['pipeline'] = [
    '#type' => 'toolbar_item',
    'tab' => [
      '#type' => 'link',
      '#title' => t('Pipeline Management'),
      '#url' => Url::fromRoute('entity.pipeline.collection'),
      '#attributes' => [
        'title' => t('Pipeline management'),
        'class' => ['toolbar-icon', 'toolbar-icon-pipeline'],
      ],
    ],
    'tray' => [
      '#heading' => t('Pipeline management'),
      'content' => [
        '#theme' => 'links__toolbar_pipeline',
        '#links' => [
          'dashboard' => [
            'title' => t('Dashboard'),
            'url' => Url::fromRoute('pipeline.dashboard'),
          ],
          'pipelines' => [
            'title' => t('Pipelines'),
            'url' => Url::fromRoute('entity.pipeline.collection'),
          ],
          'llm_config' => [
            'title' => t('LLM Configuration'),
            'url' => Url::fromRoute('entity.llm_config.collection'),
          ],
          'action_config' => [
            'title' => t('Action Config'),
            'url' => Url::fromRoute('entity.action_config.collection'),
          ],
          'prompt_template' => [
            'title' => t('Prompt templates'),
            'url' => Url::fromRoute('entity.prompt_template.collection'),
          ],
          'custom_google_search_settings' => [
            'title' => t('Custom Google Search'),
            'url' => Url::fromRoute('pipeline.google_settings'),
          ],
          'pipeline_global_settings' => [
            'title' => t('Global Settings'),
            'url' => Url::fromRoute('pipeline.settings'),
          ],
        ],
        '#attributes' => [
          'class' => ['toolbar-menu'],
        ],
      ],
    ],
    '#weight' => 1000,
  ];
  return $items;
}


/**
 * Implements hook_page_attachments().
 */
function pipeline_page_attachments(array &$attachments) {
  $attachments['#attached']['library'][] = 'pipeline/toolbar';
}

/**
 * Callback for high frequency pipeline execution.
 */
/**
 * Implements callback for ultimate_cron job pipeline_high_frequency_execution.
 */

function pipeline_execute_high_frequency_pipelines() {
  $now = \Drupal::time()->getCurrentTime();
  $logger = \Drupal::logger('pipeline');
  $config_factory = \Drupal::configFactory();
  $http_client = \Drupal::httpClient();

  // Get all enabled on-demand pipelines
  $storage = \Drupal::entityTypeManager()->getStorage('pipeline');
  $query = $storage->getQuery()
    ->condition('status', TRUE)
    ->condition('execution_type', 'on_demand')
    ->condition('execution_failures', 3, '<')
    ->accessCheck(FALSE);

  $pipeline_ids = $query->execute();

  if (empty($pipeline_ids)) {
    return;
  }

  $pipelines = $storage->loadMultiple($pipeline_ids);

  foreach ($pipelines as $pipeline) {
    try {
      $interval = $pipeline->get('execution_interval');
      if (empty($interval)) {
        continue;
      }

      // Check if enough time has passed since last execution
      $last_run = \Drupal::state()->get('pipeline.last_run.' . $pipeline->id(), 0);
      $interval_seconds = $interval * 60;

      if (($now - $last_run) >= $interval_seconds) {
        // Call the Go service endpoint
        $go_service_url = rtrim($config_factory->get('pipeline.settings')->get('go_service_url'), '/');
        $endpoint = sprintf('%s/pipeline/%s/execute', $go_service_url, $pipeline->id());

        $response = $http_client->post($endpoint, [
          'json' => [
            'triggered_by' => 'cron',
          ],
          'headers' => [
            'Content-Type' => 'application/json',
          ],
        ]);

        if ($response->getStatusCode() === 202) { // 202 Accepted
          // Update last run time
          \Drupal::state()->set('pipeline.last_run.' . $pipeline->id(), $now);
          $logger->info('Successfully triggered pipeline @id execution via Go service', [
            '@id' => $pipeline->id(),
          ]);
        } else {
          throw new \Exception('Unexpected response status: ' . $response->getStatusCode());
        }
      }
    }
    catch (\Exception $e) {
      $logger->error('Failed to execute pipeline @id: @error', [
        '@id' => $pipeline->id(),
        '@error' => $e->getMessage(),
      ]);

      // Increment failure count
      $pipeline->incrementExecutionFailures();
      $pipeline->save();
    }
  }
}
